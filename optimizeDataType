//Proper Data Types
//In Solidity, some data types are more expensive than others. Itâ€™s important to be aware of the most efficient type that can be used. Here are a few rules about data types.

//Type uint should be used in place of type string whenever possible.
//Type uint256 takes less gas to store than uint8.
//Type bytes should be used over byte[].
//If the length of bytes can be limited, use the lowest amount possible from bytes1 to bytes32.
//Type bytes32 is cheaper to use than type string.


// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.1;
contract OptimizeDataType {
    
    uint8 resulta = 0;
    uint resultb = 0;
    
    function UseUint() external returns (uint) {
        uint selectedRange = 50;
        for (uint i=0; i < selectedRange; i++) {
            resultb += 1;
        }
        return resultb;
    }
    
    function UseUInt8() external returns (uint8){
        uint8 selectedRange = 50;
        for (uint8 i=0; i < selectedRange; i++) {
            resulta += 1;
        }
        return resulta;
    }
}
